{
	"info": {
		"_postman_id": "68138eeb-1a8a-4b25-b50a-c9449236a4d8",
		"name": "Shopping",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost/shopping/products.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain new product details\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"Product added\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"Shirt\",\r\n    \"image\": \"shirt.jpg\",\r\n    \"pricing\": 32.63,\r\n    \"shipping_cost\": 2.30\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/products.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"products.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/products.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain product list\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"    var jsonDataString = responseBody.substring(responseBody.indexOf('['));\r",
							"\r",
							"    // Attempting to parse the extracted JSON data\r",
							"    try {\r",
							"        var jsonData = JSON.parse(jsonDataString);\r",
							"        pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"JSON parsing failed\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/shopping/products.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"products.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/products.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should confirm product update\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"Product updated successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"3\",\r\n    \"description\": \"School Bag\",\r\n    \"image\": \"bag.jpg\",\r\n    \"pricing\": 34.47,\r\n    \"shipping_cost\": 2.87\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/products.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"products.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/products.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should confirm product deletion\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"Product deleted successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"3\",\r\n    \"description\": \"School Bag\",\r\n    \"image\": \"bag.jpg\",\r\n    \"pricing\": 34.47,\r\n    \"shipping_cost\": 2.87\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/products.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"products.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/users.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should confirm user addition\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"User added successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"harrypotter.com\",\r\n    \"password\": \"voldmort@123\",\r\n    \"username\": \"harry\",\r\n    \"purchase_history\": \"[]\",\r\n    \"shipping_address\": \"Hogwarts, California\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/users.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"users.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/users.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain user list\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"    var jsonDataString = responseBody.substring(responseBody.indexOf('['));\r",
							"\r",
							"    try {\r",
							"        var jsonData = JSON.parse(jsonDataString);\r",
							"        pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"JSON parsing failed\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/shopping/users.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"users.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/users.php?id=2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain users with non-empty IDs\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"    var jsonDataString = responseBody.substring(responseBody.indexOf('['));\r",
							"\r",
							"    try {\r",
							"        var jsonData = JSON.parse(jsonDataString);\r",
							"        jsonData.forEach(function(user) {\r",
							"            pm.expect(user.id).to.not.be.empty;\r",
							"        });\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"JSON parsing failed\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/users.php?id=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"users.php"
					],
					"query": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/users.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should confirm user update\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"User updated successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"email\": \"don@example.com\",\r\n    \"password\": \"don_password\",\r\n    \"username\": \"don_user\",\r\n    \"purchase_history\": \"[]\",\r\n    \"shipping_address\": \"Don's Address, City, Country\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/users.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"users.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/users.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should confirm user deletion\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"\r",
							"    pm.expect(responseBody).to.include(\"success\");\r",
							"    pm.expect(responseBody).to.include(\"User deleted successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/users.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"users.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/comments.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Comment added successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_id\": \"1\",\r\n    \"user_id\": \"1\",\r\n    \"rating\": \"5\",\r\n    \"image\": \"image_url_here\",\r\n    \"text\": \"This is a test comment.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/comments.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"comments.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/comments.php?product_id=2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain comments with non-empty ids\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"    var jsonDataString = responseBody.substring(responseBody.indexOf('['));\r",
							"\r",
							"    try {\r",
							"        var jsonData = JSON.parse(jsonDataString);\r",
							"        \r",
							"        pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"        jsonData.forEach(function(comment) {\r",
							"            pm.expect(comment.id).to.not.be.empty;\r",
							"        });\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"JSON parsing failed\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/shopping/comments.php?product_id=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"comments.php"
					],
					"query": [
						{
							"key": "product_id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/comments.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Comment updated successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"rating\": 4,\r\n    \"image\": \"updated_comment_image.jpg\",\r\n    \"text\": \"I changed my mind, it's good but not great.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/comments.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"comments.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/comments.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Comment deleted successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 4\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/comments.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"comments.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/cart.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Item added to cart successfully..\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": 1,\r\n    \"product_id\": 1,\r\n    \"quantity\": 3\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/cart.php?user_id=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"[\"));\r",
							"    var responseData = JSON.parse(jsonData);\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.user_id).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(item.product_id).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/shopping/cart.php?user_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"cart.php"
					],
					"query": [
						{
							"key": "user_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/cart.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Quantity updated successfully..\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": 1,\r\n    \"product_id\": 1,\r\n    \"quantity\": 10\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/cart.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Item removed from cart successfully..\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": 1,\r\n    \"product_id\": 2\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/cart.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"cart.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/orders.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Order created successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": 1,\r\n    \"total_amount\": 1320.00,\r\n    \"status\": \"Pending\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/shopping/orders.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"orders.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/orders.php?user_id=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"[\"));\r",
							"    var responseData = JSON.parse(jsonData);\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(item.user_id).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(item.total_amount).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(item.status).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/shopping/orders.php?user_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"orders.php"
					],
					"query": [
						{
							"key": "user_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/orders.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Order status successfully updated\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "order_id",
							"value": "1",
							"type": "text"
						},
						{
							"key": "status",
							"value": "Completed",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/shopping/orders.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"orders.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost/shopping/orders.php",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Connection established\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Connection successfully established!\");\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status is success\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.status).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    var jsonData = pm.response.text().substring(pm.response.text().indexOf(\"{\"));\r",
							"    var responseJson = JSON.parse(jsonData);\r",
							"    pm.expect(responseJson.message).to.equal(\"Order successfully deleted\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "order_id",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost/shopping/orders.php",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"shopping",
						"orders.php"
					]
				}
			},
			"response": []
		}
	]
}